MODEL: #MODEL field
    framework: "Recognizer2D" #Mandatory, indicate the type of network, associate to the 'paddlevideo/modeling/framework/' .
    backbone: #Mandatory, indicate the type of backbone, associate to the 'paddlevideo/modeling/backbones/' .
        name: "ResNet" #Mandatory, The name of backbone.
        pretrained: "data/ResNet50_pretrain.pdparams" #Optional, pretrained model path.
        depth: 50 #Optional, the depth of backbone architecture.
    head:
        name: "TSNHead" #Mandatory, indicate the type of head, associate to the 'paddlevideo/modeling/heads'
        num_classes: 400 #Optional, the number of classes to be classified.
        in_channels: 2048 #input channel of the extracted feature.
        drop_ratio: 0.4 #the ratio of dropout
        std: 0.01 #std value in params initialization


DATASET: #DATASET field
    batch_size: 32 #Mandatory, bacth size
    valid_batch_size: 32
    test_batch_size: 1
    num_workers: 4 #Mandatory, XXX the number of subprocess on each GPU.
    train:
        format: "FrameDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "data/k400/rawframes" #Mandatory, train data root path
        file_path: "data/k400/train_frames.list" #Mandatory, train data index file path
        suffix: 'img_{:05}.jpg'
    valid:
        format: "FrameDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "data/k400/rawframes" #Mandatory, valid data root path
        file_path: "data/k400/val_frames.list" #Mandatory, valid data index file path
        suffix: 'img_{:05}.jpg'
    test:
        format: "FrameDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "data/k400/rawframes" #Mandatory, valid data root path
        file_path: "data/k400/val_frames.list" #Mandatory, valid data index file path
        suffix: 'img_{:05}.jpg'


PIPELINE: #PIPELINE field
    train: #Mandotary, indicate the pipeline to deal with the training data, associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "FrameDecoder"
        sample:
            name: "Sampler"
            num_seg: 3
            seg_len: 1
            valid_mode: False
            select_left: True
        transform: #Mandotary, image transfrom operator
            - Scale:
                short_size: 256
                fixed_ratio: False
                do_round: True
                backend: 'cv2'
            - MultiScaleCrop:
                target_size: 224
                allow_duplication: True
                more_fix_crop: False
                backend: 'cv2'
            - RandomFlip:
            - Image2Array:
            - Normalization:
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]

    valid: #Mandatory, indicate the pipeline to deal with the validing data. associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "FrameDecoder"
        sample:
            name: "Sampler"
            num_seg: 3
            seg_len: 1
            valid_mode: True
            select_left: True
        transform:
            - Scale:
                short_size: 256
                fixed_ratio: False
                do_round: True
                backend: 'cv2'
            - CenterCrop:
                target_size: 224
                do_round: False
            - Image2Array:
            - Normalization:
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]

    test:
        decode:
            name: "FrameDecoder"
        sample:
            name: "Sampler"
            num_seg: 25
            seg_len: 1
            valid_mode: True
            select_left: True
        transform:
            - Scale:
                short_size: 256
                fixed_ratio: False
                do_round: True
                backend: 'cv2'
            - TenCrop:
                target_size: 224
            - Image2Array:
            - Normalization:
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]


OPTIMIZER: #OPTIMIZER field
    name: 'Momentum' #Mandatory, the type of optimizer, associate to the 'paddlevideo/solver/'
    momentum: 0.9
    learning_rate: #Mandatory, the type of learning rate scheduler, associate to the 'paddlevideo/solver/'
        name: 'PiecewiseDecay'
        boundaries: [40, 80]
        values: [0.01, 0.001, 0.0001]  #4 cards * 32 batch size
    weight_decay:
        name: 'L2'
        value: 0.0001
    grad_clip:
        name: 'ClipGradByGlobalNorm'
        value: 40.0

METRIC:
    name: 'CenterCropMetric'


INFERENCE:
    name: 'ppTSN_Inference_helper'
    num_seg: 25
    target_size: 224


model_name: "TSN"
log_interval: 20 #Optional, the interal of logger, default:10
save_interval: 10
epochs: 100 #Mandatory, total epoch
log_level: "INFO" #Optional, the logger level. default: "INFO"
